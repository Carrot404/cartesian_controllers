<?xml version="1.0"?>
<launch>

        <!-- ================================================================================-->
        <!-- =              ur_modern_driver specific                                       =-->
        <!-- ================================================================================-->
        <!-- GDB functionality -->
        <arg name="debug" default="false" />
        <arg unless="$(arg debug)" name="launch_prefix" value="" />
        <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

        <arg name="robot_ip" default="ids-ur10"/>
        <arg name="limited" default="false"/>
        <arg name="min_payload"  default="0.0"/>
        <arg name="max_payload"  default="5.0"/>
        <arg name="prefix" default="" />  
        <arg name="max_velocity" default="10.0"/> <!-- [rad/s] -->
        <arg name="base_frame" default="$(arg prefix)base" />
        <arg name="tool_frame" default="$(arg prefix)tool0_controller" />
        <!-- robot model -->
        <include file="$(find ur_description)/launch/ur10_upload.launch">
                <arg name="limited" value="$(arg limited)"/>
        </include>


        <!-- Load hardware interface -->
        <node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver" output="log" launch-prefix="$(arg launch_prefix)">
                <param name="robot_ip_address" type="str" value="$(arg robot_ip)"/>
                <param name="min_payload" type="double" value="$(arg min_payload)"/>
                <param name="max_payload" type="double" value="$(arg max_payload)"/>
                <param name="max_velocity" type="double" value="$(arg max_velocity)"/>
                <param name="use_ros_control" type="bool" value="True"/>
                <param name="servoj_gain" type="double" value="750" />
                <param name="prefix" value="$(arg prefix)" />
                <param name="base_frame" type="str" value="$(arg base_frame)"/>
                <param name="tool_frame" type="str" value="$(arg tool_frame)"/>
        </node>

        <!-- Load controller settings for the ur_modern_driver -->
        <rosparam file="$(find ur_modern_driver)/config/ur10_controllers.yaml" command="load"></rosparam>

        <!-- ================================================================================-->
        <!-- =              Cartesian controllers specific                                  =-->
        <!-- ================================================================================-->
        <!-- Load Cartesian controllers for testing -->
        <rosparam file="$(find cartesian_controller_test)/controller.yaml" command="load"></rosparam>

        <!-- Spawn controllers. The controller manager is loaded separately through the ur_modern_driver -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" args="--stopped my_cartesian_motion_controller my_cartesian_force_controller my_cartesian_compliance_controller my_joint_to_cartesian_controller" />

        <!-- Spawn joint controller for testing my_joint_to_cartesian_controller  -->
        <!-- Note: This controller should be loaded and started -->
        <group ns="my_joint_to_cartesian_controller" >
                <node name="controller_spawner" pkg="controller_manager" type="spawner" args="joint_trajectory_controller" />
        </group>

        <!-- ================================================================================-->
        <!-- =              force torque sensor                                             =-->
        <!-- ================================================================================-->
        <!-- start control interface (sensor) -->
        <remap from="wrench" to="/my_cartesian_compliance_controller/ft_sensor_wrench" />
        <include file="$(find weiss_kms40)/launch/kms40.launch">
        </include>

        <!-- ================================================================================-->
        <!-- =              general setup                                                   =-->
        <!-- ================================================================================-->
        <!-- Load robot_description to parameter server -->
        <param name="/robot_description"
        command="$(find xacro)/xacro.py '$(find cartesian_controller_test)/robot.urdf.xacro'" />

        <!-- Robot state publisher -->
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
                <param name="publish_frequency" type="double" value="50.0" />
                <param name="tf_prefix" type="string" value="" />
        </node>

        <!-- Load robot_description to parameter server -->
        <param name="/robot_description"
        command="$(find xacro)/xacro.py '$(find cartesian_controller_test)/robot.urdf.xacro'" />

        <!-- Joint state publisher -->
        <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner" args="joint_state_controller force_torque_sensor_controller" respawn="false" output="screen"/>

        <!-- Visualization -->
        <arg name="my_rviz" value="-d $(find cartesian_controller_test)/test.rviz" />
        <node name="rviz" pkg="rviz" type="rviz" respawn="false" args="$(arg my_rviz)" output="screen" >
        </node>

</launch>
